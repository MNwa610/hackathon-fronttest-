import React, { useEffect, useRef, useState } from 'react';
import { load } from '@2gis/mapgl';
import { routingAPI } from '../utils/routingAPI';

const Map = ({ routeData, onPointsChange }) => {
  const mapContainer = useRef(null);
  const mapInstance = useRef(null);
  const markersRef = useRef([]);
  const routeLineRef = useRef(null);
  const [points, setPoints] = useState([]);
  const [isAddingPoints, setIsAddingPoints] = useState(false);

  useEffect(() => {
    const initMap = async () => {
      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º MapGL API
        const mapgl = await load();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
        mapInstance.current = new mapgl.Map(mapContainer.current, {
          center: [55.31878, 25.23584], // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          zoom: 13,
          key: 'a56ee526-deb2-4819-b1c5-e92947d547cc', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const defaultMarker = new mapgl.Marker(mapInstance.current, {
          coordinates: [55.752371, 37.618752],
        });
        markersRef.current.push(defaultMarker);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–∞—Ä—Ç–µ
        const handleMapClick = (event) => {
          if (isAddingPoints) {
            addPoint(event.lngLat);
          }
        };
        
        mapInstance.current.on('click', handleMapClick);

      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç—ã:', error);
      }
    };

    initMap();

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => {
      if (mapInstance.current) {
        mapInstance.current.destroy();
      }
    };
  }, []);

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è isAddingPoints
  useEffect(() => {
    if (mapInstance.current) {
      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
      mapInstance.current.off('click');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
      const handleMapClick = (event) => {
        if (isAddingPoints) {
          addPoint(event.lngLat);
        }
      };
      
      mapInstance.current.on('click', handleMapClick);
    }
  }, [isAddingPoints]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
  useEffect(() => {
    const handleResize = () => {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      setTimeout(() => {
        updateMapSize();
      }, 100);
    };

    window.addEventListener('resize', handleResize);
    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []);


  // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏
  const addPoint = (coordinates) => {
    const newPoint = {
      id: Date.now(),
      coordinates: [coordinates.lng, coordinates.lat],
      name: `–¢–æ—á–∫–∞ ${points.length + 1}`
    };
    
    const updatedPoints = [...points, newPoint];
    setPoints(updatedPoints);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç—É
    if (mapInstance.current) {
      const mapgl = window.mapgl || mapInstance.current._mapgl;
      if (mapgl) {
        const marker = new mapgl.Marker(mapInstance.current, {
          coordinates: newPoint.coordinates,
          icon: 'üìç',
        });
        markersRef.current.push(marker);
      }
    }
    
    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞—Ä—Ç—É –∫ –Ω–æ–≤–æ–π —Ç–æ—á–∫–µ
    if (mapInstance.current) {
      mapInstance.current.setCenter([coordinates.lat, coordinates.lng]);
    }
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    if (onPointsChange) {
      onPointsChange(updatedPoints);
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å 2 –∏–ª–∏ –±–æ–ª—å—à–µ —Ç–æ—á–µ–∫, —Å—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç
    if (updatedPoints.length >= 2) {
      buildRoute(updatedPoints);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ
  const moveToPoint = (point) => {
    if (mapInstance.current) {
      mapInstance.current.setCenter([point.coordinates[0], point.coordinates[1]]);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏
  const removePoint = (pointId) => {
    const updatedPoints = points.filter(point => point.id !== pointId);
    setPoints(updatedPoints);
    
    // –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —Å –∫–∞—Ä—Ç—ã
    const markerIndex = points.findIndex(point => point.id === pointId);
    if (markerIndex !== -1 && markersRef.current[markerIndex]) {
      markersRef.current[markerIndex].destroy();
      markersRef.current.splice(markerIndex, 1);
    }
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    if (onPointsChange) {
      onPointsChange(updatedPoints);
    }
    
    // –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ—á–∫–∏
    if (updatedPoints.length >= 2) {
      buildRoute(updatedPoints);
    } else {
      // –£–¥–∞–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –µ—Å–ª–∏ —Ç–æ—á–µ–∫ –º–µ–Ω—å—à–µ 2
      if (routeLineRef.current) {
        routeLineRef.current.destroy();
        routeLineRef.current = null;
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
  const buildRoute = async (pointsToRoute) => {
    if (pointsToRoute.length < 2) return;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç —á–µ—Ä–µ–∑ 2GIS Routing API
      const routeData = await routingAPI.getRoute(pointsToRoute, 'walking');
      
      if (mapInstance.current) {
        const mapgl = window.mapgl || mapInstance.current._mapgl;
        if (mapgl) {
          // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç
          if (routeLineRef.current) {
            routeLineRef.current.destroy();
          }
          
          // –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–∏—é –º–∞—Ä—à—Ä—É—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
          routeLineRef.current = new mapgl.Polyline(mapInstance.current, {
            coordinates: routeData.coordinates,
            color: '#66bb6a',
            width: 4,
          });

          // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ
          console.log(`–ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω: ${routeData.distance}–º, ${Math.round(routeData.duration/60)}–º–∏–Ω`);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞:', error);
      
      // Fallback: —Å–æ–∑–¥–∞–µ–º –ø—Ä—è–º—É—é –ª–∏–Ω–∏—é –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
      const coordinates = pointsToRoute.map(point => point.coordinates);
      
      if (mapInstance.current) {
        const mapgl = window.mapgl || mapInstance.current._mapgl;
        if (mapgl) {
          if (routeLineRef.current) {
            routeLineRef.current.destroy();
          }
          
          routeLineRef.current = new mapgl.Polyline(mapInstance.current, {
            coordinates: coordinates,
            color: '#ff6b6b',
            width: 4,
          });
        }
      }
    }
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–∞
  useEffect(() => {
    if (routeData && mapInstance.current) {
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
      markersRef.current.forEach(marker => marker.destroy());
      markersRef.current = [];

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
      const mapgl = window.mapgl || mapInstance.current._mapgl;
      if (mapgl) {
        // –ú–∞—Ä–∫–µ—Ä –Ω–∞—á–∞–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∞
        const startMarker = new mapgl.Marker(mapInstance.current, {
          coordinates: routeData.coordinates.from,
          icon: 'üìç',
        });
        markersRef.current.push(startMarker);

        // –ú–∞—Ä–∫–µ—Ä –∫–æ–Ω—Ü–∞ –º–∞—Ä—à—Ä—É—Ç–∞
        const endMarker = new mapgl.Marker(mapInstance.current, {
          coordinates: routeData.coordinates.to,
          icon: 'üèÅ',
        });
        markersRef.current.push(endMarker);

        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ
        const centerLat = (routeData.coordinates.from[0] + routeData.coordinates.to[0]) / 2;
        const centerLng = (routeData.coordinates.from[1] + routeData.coordinates.to[1]) / 2;
        mapInstance.current.setCenter([centerLat, centerLng]);
      }
    }
  }, [routeData]);

  return (
    <div className="map-container">
      <div ref={mapContainer} className="map" />
      

      {/* Points Controls */}
      <div className="points-controls">
        <button 
          className={`points-btn ${isAddingPoints ? 'active' : ''}`}
          onClick={() => setIsAddingPoints(!isAddingPoints)}
        >
          {isAddingPoints ? '–û—Ç–º–µ–Ω–∏—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫–∏'}
        </button>
        
        {isAddingPoints && (
          <div className="points-hint">
            –ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –∫–∞—Ä—Ç–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏
          </div>
        )}
        
        {points.length > 0 && (
          <button 
            className="clear-btn"
            onClick={() => {
              setPoints([]);
              markersRef.current.forEach(marker => marker.destroy());
              markersRef.current = [];
              if (routeLineRef.current) {
                routeLineRef.current.destroy();
                routeLineRef.current = null;
              }
              if (onPointsChange) {
                onPointsChange([]);
              }
            }}
          >
            –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
          </button>
        )}
      </div>

      {/* Points List */}
      {points.length > 0 && (
        <div className="points-list">
          <h4>–¢–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞:</h4>
          {points.map((point, index) => (
            <div key={point.id} className="point-item">
              <span className="point-number">{index + 1}</span>
              <span 
                className="point-name clickable"
                onClick={() => moveToPoint(point)}
                title="–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫ —Ç–æ—á–∫–µ"
              >
                {point.name}
              </span>
              <button 
                className="remove-point-btn"
                onClick={() => removePoint(point.id)}
              >
                ‚úï
              </button>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default Map;
