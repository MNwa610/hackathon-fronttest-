import React, { useState } from 'react';
import { routingAPI } from '../utils/routingAPI';

const RouteSearch = ({ onRouteFound, routeInfo }) => {
  const [fromLocation, setFromLocation] = useState('');
  const [toLocation, setToLocation] = useState('');
  const [isSearching, setIsSearching] = useState(false);

  const handleSearch = async () => {
    if (!fromLocation.trim() || !toLocation.trim()) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±–∞ –ø–æ–ª—è');
      return;
    }

    setIsSearching(true);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤ —á–µ—Ä–µ–∑ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
      const [fromCoords, toCoords] = await Promise.all([
        routingAPI.geocodeAddress(fromLocation),
        routingAPI.geocodeAddress(toLocation)
      ]);

      // –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫–∏ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
      const points = [
        {
          id: 1,
          coordinates: fromCoords.coordinates,
          name: fromCoords.name || fromLocation
        },
        {
          id: 2,
          coordinates: toCoords.coordinates,
          name: toCoords.name || toLocation
        }
      ];

      // –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
      const routeData = await routingAPI.getRoute(points, 'walking');
      
      const route = {
        from: fromLocation,
        to: toLocation,
        duration: `${Math.round(routeData.duration/60)}–º–∏–Ω`,
        distance: `${Math.round(routeData.distance/1000)} –∫–º`,
        coordinates: {
          from: fromCoords.coordinates,
          to: toCoords.coordinates
        },
        routeCoordinates: routeData.coordinates
      };
      
      onRouteFound(route);
      setIsSearching(false);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–æ–≤.');
      setIsSearching(false);
    }
  };

  return (
    <div className="left-panel">
      {/* Input Fields */}
      <div className="input-field">
        <div className="input-icon">üìç</div>
        <input 
          type="text" 
          placeholder="–û—Ç–∫—É–¥–∞"
          value={fromLocation}
          onChange={(e) => setFromLocation(e.target.value)}
        />
      </div>
      
      <div className="input-field">
        <div className="input-icon">üìç</div>
        <input 
          type="text" 
          placeholder="–ö—É–¥–∞"
          value={toLocation}
          onChange={(e) => setToLocation(e.target.value)}
        />
      </div>

      {/* Find Route Button */}
      <button 
        className="find-route-btn"
        onClick={handleSearch}
        disabled={isSearching}
      >
        <span className="btn-icon">üîç</span>
        <span>{isSearching ? '–ü–æ–∏—Å–∫...' : '–ù–∞–π—Ç–∏ –º–∞—Ä—à—Ä—É—Ç'}</span>
      </button>

      {/* Route Information */}
      <div className="route-info">
        <div className="route-detail">
          –í—Ä–µ–º—è: {routeInfo?.duration || '25–º–∏–Ω'}
        </div>
        <div className="route-detail">
          –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {routeInfo?.distance || '12 –∫–º'}
        </div>
      </div>

      {/* Transportation Mode */}
      <div className="transport-modes">
        <div className="transport-option active">
          <span className="transport-icon">üö∂</span>
          <span>–ü–µ—à–∫–æ–º</span>
        </div>
      </div>

      {/* Start Button */}
      <button className="start-btn">–ù–∞—á–∞—Ç—å</button>
    </div>
  );
};

export default RouteSearch;
